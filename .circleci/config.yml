## Reusable Definitinos
##
go-job: &go-job
  docker:
    - image: golang:1.13

docker-job: &docker-job
  docker:
    - image: docker:stable-git

go-modules: &go-modules
  name: Go Modules
  command: go mod tidy

write-version: &write-version
  name: Write Version
  command: |
    VERSION=$(cat VERSION)
    VERSION=${VERSION/-0/-$CIRCLE_BUILD_NUM}
    echo ${VERSION} > VERSION

install-cherry: &install-cherry
  name: Install Cherry
  command: curl -s https://raw.githubusercontent.com/moorara/cherry/master/scripts/install.sh | bash

install-test-reporter: &install-test-reporter
  name: Install Code Climate Test Reporter
  command: |
    curl -fsSL -o /usr/local/bin/test-reporter https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64
    chmod 755 /usr/local/bin/test-reporter

login-docker: &login-docker
  name: Login to Docker Hub
  command: docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD


## CircleCI Config
##
version: 2
jobs:

  unit-test:
    <<: *go-job
    # This is required since Code Climate test-reporter do not support go modules currently
    working_directory: /go/src/github.com/moorara/cherry
    environment:
      GO111MODULE: "on"
    steps:
      - checkout
      - run: *go-modules
      - run: *install-cherry
      - run: *install-test-reporter
      - run:
          name: Unit Tests
          command: go test -race ./...
      - run:
          name: Generate Coverage Report
          command: |
            test-reporter before-build
            cherry test
            exit_code=$?
            cp coverage/cover.out c.out
            test-reporter after-build --id ${CODECLIMATE_REPORTER_ID} --exit-code $exit_code
      - store_artifacts:
          path: coverage/

  build-binary:
    <<: *go-job
    steps:
      - checkout
      - run: *go-modules
      - run: *write-version
      - run: *install-cherry
      - run:
          name: Build Binaries
          command: cherry build
      - store_artifacts:
          path: bin/

  build-docker:
    <<: *docker-job
    steps:
      - checkout
      - setup_remote_docker
      - run: *write-version
      - run:
          name: Build Docker Image
          command: |
            docker_image="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME:$(cat VERSION)"
            docker image build -t $docker_image .
            docker image save -o docker.tar $docker_image
      - persist_to_workspace:
          root: .
          paths:
            - VERSION
            - docker.tar

  push-docker:
    <<: *docker-job
    steps:
      - setup_remote_docker
      - run: *login-docker
      - attach_workspace:
          at: .
      - run:
          name: Push Docker Image
          command: |
            docker image load -i docker.tar
            docker_image="$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME"
            docker image tag $docker_image:$(cat VERSION) $docker_image:latest
            docker image push $docker_image


workflows:
  version: 2
  build-test-push:
    jobs:
      - unit-test
      - build-binary
      - build-docker
      - push-docker:
          context: dev
          requires:
            - build-docker
          filters:
            branches:
              only: master
